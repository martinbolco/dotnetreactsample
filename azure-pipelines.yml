# ASP.NET
# Build and test ASP.NET projects.
# Add steps that publish symbols, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/aspnet/build-aspnet-4

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

variables:
  reactAppPath: 'client-app'
  dotnetAppPath: 'server-api'
  reactBuildDir: 'client-app/build'
  dotnetPublishDir: '$(Build.ArtifactStagingDirectory)/backend-publish'
  configuration: 'Release'

stages:
# ----------------------------
# Stage 1: Build
# ----------------------------
- stage: Build
  variables:
  - group: reactdevtest
  displayName: Build Frontend and Backend
  jobs:
  - job: BuildReact
    displayName: Build React Frontend
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '18.x'
      displayName: 'Install Node.js'

    - script: |
        echo "Building React..."
        npm install
        npm run build
      workingDirectory: ./client-app
      env:
        REACT_APP_API_URL: $(REACT_APP_API_URL)
        REACT_APP_CLIENT_ID: $(REACT_APP_CLIENT_ID)
        REACT_APP_AUTHORITY: $(REACT_APP_AUTHORITY)
        REACT_APP_REDIRECT_URI: $(REACT_APP_REDIRECT_URI)
        REACT_APP_LOGIN_REQUEST_SCOPE: $(REACT_APP_LOGIN_REQUEST_SCOPE)
      displayName: 'Build React App'

    - task: ArchiveFiles@2
      inputs:
        rootFolderOrFile: '$(reactBuildDir)'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/client-app.zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/client-app.zip'
        ArtifactName: 'client-app'
        publishLocation: 'Container'

  - job: BuildDotNet
    displayName: Build .NET Backend
    pool:
      vmImage: 'windows-latest'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - task: NuGetToolInstaller@1

    - task: NuGetCommand@2
      inputs:
        restoreSolution: '**/*.sln'

    - task: DotNetCoreCLI@2
      displayName: 'Run Unit Tests with Coverage'
      inputs:
        command: 'test'
        projects: '**/*Tests.csproj'
        arguments: >
          --configuration $(configuration)
          --collect:"XPlat Code Coverage"
          --settings coverlet.runsettings
        publishTestResults: true


    - task: PublishCodeCoverageResults@2
      displayName: 'Publish Code Coverage Results'
      inputs:
        codeCoverageTool: 'cobertura'
        summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'


    - task: DotNetCoreCLI@2
      inputs:
        command: 'publish'
        publishWebProjects: true
        arguments: '--configuration $(configuration) --output $(dotnetPublishDir)'
        zipAfterPublish: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(dotnetPublishDir)'
        ArtifactName: 'server-api'
        publishLocation: 'Container'

# ----------------------------
# Stage 2: Deploy
# ----------------------------
- stage: Deploy
  displayName: Deploy to Azure
  dependsOn: Build
  jobs:
  - deployment: DeployReactApp
    displayName: Deploy React Frontend
    environment: 'devtest'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: client-app

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'azureconnection'
              appType: 'webApp'
              appName: 'client-app'
              package: '$(Pipeline.Workspace)/client-app/client-app.zip'

  - deployment: DeployDotNetApi
    displayName: Deploy .NET Backend
    environment: 'devtest'
    pool:
      vmImage: 'windows-latest'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: server-api

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'azureconnection'
              appType: 'webApp'
              appName: 'server-api'
              package: '$(Pipeline.Workspace)/server-api/*.zip'
